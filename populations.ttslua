
local resourceStorage = {
    [0] = {-6.85, 1.30, 3.44},
    [1] = {-5.95, 1.30, 3.44},
    [2] = {-5.05, 1.30, 3.45},
    [3] = {-4.16, 1.30, 3.43},
    [4] = {-3.24, 1.30, 3.42},
    [5] = {-2.34, 1.30, 3.43},
    [6] = {-1.42, 1.30, 3.43},
    [7] = {-0.51, 1.30, 3.42},
    [8] = {0.39, 1.30, 3.43},
    [9] = {1.30, 1.30, 3.42},
    [10] = {2.22, 1.30, 3.41},
    [11] = {3.13, 1.30, 3.42},
    [12] = {3.13, 1.30, 3.42},
    [13] = {4.93, 1.30, 3.44},
    [14] = {5.83, 1.30, 3.43},
    [15] = {6.70, 1.30, 3.38},
    [16] = {7.27, 1.30, 2.88},
    [17] = {7.63, 1.30, 2.21},
    [18] = {7.63, 1.30, 1.31},
    [19] = {7.63, 1.30, 0.39},
    [20] = {7.60, 1.30, -0.51},
    [21] = {7.65, 1.30, -1.41},
    [22] = {7.64, 1.30, -2.31},
    [23] = {7.30, 1.30, -3.01},
    [24] = {6.75, 1.30, -3.52},
    [25] = {5.85, 1.30, -3.47},
    [26] = {4.93, 1.30, -3.49},
    [27] = {4.03, 1.30, -3.50},
    [28] = {3.12, 1.30, -3.51},
    [29] = {2.21, 1.30, -3.48},
    [30] = {1.33, 1.30, -3.47},
    [31] = {0.41, 1.30, -3.50},
    [32] = {-0.53, 1.30, -3.49},
    [33] = {-1.42, 1.30, -3.50},
    [34] = {-2.35, 1.30, -3.50},
    [35] = {-3.26, 1.30, -3.47},
    [36] = {-4.18, 1.30, -3.48},
    [37] = {-5.07, 1.30, -3.48},
    [38] = {-5.99, 1.30, -3.48},
    [39] = {-6.90, 1.30, -3.48},
}

local resourceProduction = {
    materials = {
        [1] = {
            position = {-7.13, 1.31, 0.96},
            rotation = {0.00, 118.50, -0.01},
        },
        [2] = {
            position = {-6.49, 1.31, 1.68},
            rotation = {0.00, 144.47, 359.99},
        },
        [3] = {
            position = {-5.59, 1.31, 2.04},
            rotation = {0.00, 171.90, 359.99},
        },
        [4] = {
            position = {-4.55, 1.31, 1.89},
            rotation = {0.00, 201.26, 0.00},
        },
        [5] = {
            position = {-3.76, 1.31, 1.34},
            rotation = {0.01, 227.66, 0.00},
        },
        [6] = {
            position = {-3.32, 1.31, 0.50},
            rotation = {0.00, 164.99, 359.99},
        },
        [7] = {
            position = {-3.31, 1.31, -0.55},
            rotation = {0.00, 194.61, 0.00},
        },
        [8] = {
            position = {-3.78, 1.31, -1.39},
            rotation = {0.01, 222.45, 0.00},
        },
        [9] = {
            position = {-4.54, 1.31, -1.93},
            rotation = {0.00, 159.69, 359.99},
        },
        [10] = {
            position = {-5.58, 1.31, -2.05},
            rotation = {0.00, 187.54, -0.01},
        },
        [11] = {
            position = {-6.49, 1.31, -1.72},
            rotation = {0.01, 216.34, 0.00},
        },
        [12] = {
            position = {-7.14, 1.31, -0.98},
            rotation = {0.01, 241.31, 0.00},
        },
    },
    science = {
        [1] = {
            position = {-2.24, 1.31, 0.97},
            rotation = {0.00, 118.50, -0.01},
        },
        [2] = {
            position = {-1.59, 1.31, 1.66},
            rotation = {0.00, 144.47, 359.99},
        },
        [3] = {
            position = {-0.72, 1.31, 2.01},
            rotation = {0.00, 171.90, 359.99},
        },
        [4] = {
            position = {0.33, 1.31, 1.88},
            rotation = {0.00, 201.26, 0.00},
        },
        [5] = {
            position = {1.15, 1.31, 1.35},
            rotation = {0.01, 227.66, 0.00},
        },
        [6] = {
            position = {1.57, 1.31, 0.50},
            rotation = {0.00, 164.99, 359.99},
        },
        [7] = {
            position = {1.57, 1.31, -0.55},
            rotation = {0.00, 194.61, 0.00},
        },
        [8] = {
            position = {1.11, 1.31, -1.40},
            rotation = {0.01, 222.45, 0.00},
        },
        [9] = {
            position = {0.34, 1.31, -1.93},
            rotation = {0.00, 159.69, 359.99},
        },
        [10] = {
            position = {-0.70, 1.31, -2.08},
            rotation = {0.00, 187.54, -0.01},
        },
        [11] = {
            position = {-1.61, 1.31, -1.72},
            rotation = {0.01, 216.34, 0.00},
        },
        [12] = {
            position = {-2.24, 1.31, -1.00},
            rotation = {0.01, 241.31, 0.00},
        },
    },

    money = {
        [1] = {
            position = {2.66, 1.31, 0.96},
            rotation = {0.00, 118.50, -0.01},
        },
        [2] = {
            position = {3.26, 1.31, 1.67},
            rotation = {0.00, 144.47, 359.99},
        },
        [3] = {
            position = {4.16, 1.31, 2.02},
            rotation = {0.00, 171.90, 359.99},
        },
        [4] = {
            position = {5.21, 1.31, 1.88},
            rotation = {0.00, 201.26, 0.00},
        },
        [5] = {
            position = {6.03, 1.31, 1.32},
            rotation = {0.01, 227.66, 0.00},
        },
        [6] = {
            position = {6.46, 1.31, 0.47},
            rotation = {0.00, 164.99, 359.99},
        },
        [7] = {
            position = {6.45, 1.31, -0.57},
            rotation = {0.00, 194.61, 0.00},
        },
        [8] = {
            position = {6.01, 1.31, -1.42},
            rotation = {0.01, 222.45, 0.00},
        },
        [9] = {
            position = {5.22, 1.31, -1.96},
            rotation = {0.00, 159.69, 359.99},
        },
        [10] = {
            position = {4.16, 1.31, -2.09},
            rotation = {0.00, 187.54, -0.01},
        },
        [11] = {
            position = {3.27, 1.31, -1.74},
            rotation = {0.01, 216.34, 0.00},
        },
        [12] = {
            position = {2.65, 1.31, -1.02},
            rotation = {0.01, 241.31, 0.00},
        },
    }
}

local resourceBoards_GUID = {
    White  = '6888bc',
    Yellow = '75ff00',
    Red    = '598818',
    Green  = '07fb94',
    Blue   = 'd8348c',
    Purple = 'b50d53'
}

function getNextCube(type, color)
    -- Returns the next unused population cube of a type of resource from a
    -- given Player color

    local resourceBoard = getObjectFromGUID(resourceBoards_GUID[color])
    type = string.gsub(type, 'adv_', '')
    if DEBUG then
        assert(resourceBoard, 'No resource board found for '..tostring(color))
        assert(#resourceProduction[type]>1)
    end

    for _, pos in ipairs(resourceProduction[type]) do
        local n_pos = (resourceBoard.getPosition() +
            Vector(pos.position[1]*boardInvertFactor(resourceBoard), pos.position[2], pos.position[3]))
        local pop = castAndCheckForTag(n_pos, 'Population', 3)
        if pop then return pop end
    end
    log('No '..tostring(type)..' pop cube found for '..tostring(color), 'getNextCube')
    return nil
end

function placePopulations(hex, color, types)
    -- Fully fills a hex with populations
    typesToFill = types or {'money', 'materials', 'science'}

    for _, type in pairs(typesToFill) do
        for _, local_pos in pairs(hex.getVar(type)) do
            log("Type: "..tostring(type)..", Color: "..tostring(color), 'placePopulations')
            local cube = getNextCube(type, color)

            f_pos = getRelativePosition(hex, local_pos)
            cube.setPositionSmooth(f_pos, false, true)
            cube.setRotation(hex.getRotation())
        end
    end


end
