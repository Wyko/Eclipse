loc = 'left'
shipPos = {
    ['above'] = {
        ['Interceptor'] = PlayerPosition + Vector(-6*InvPos, 1.0, 28*InvPos),
        ['Cruiser'] = PlayerPosition + Vector(-2*InvPos, 1.2, 28*InvPos),
        ['Dreadnought'] = PlayerPosition + Vector(2*InvPos, 1.2, 28*InvPos),
        ['Starbase'] = PlayerPosition + Vector(6*InvPos, 1.2, 28*InvPos),
    },
    ['left'] =  {
        ['Interceptor'] = PlayerPosition + Vector(-19*InvPos, 0, 10*InvPos),
        ['Cruiser'] = PlayerPosition + Vector(-14*InvPos, 0, 10*InvPos),
        ['Dreadnought'] = PlayerPosition + Vector(-19*InvPos, -0.48, 6*InvPos),
        ['Starbase'] = PlayerPosition + Vector(-14*InvPos, 0.2, 6*InvPos),
    }
}


function placePlayerShips(takeParams, PlayerPosition, InvPos, PlayerColor, Box)
    -- This is for easy switching of ship locations
    for ship_type, pos in pairs(shipPos[loc]) do
        table.insert(tq_makeShipBags, 1,
        {
            func    = task_makeShipBags,
            shipBag = SeekAndClone(
                        args.ship_type,
                        args.playerPartsBag,
                        args.pos,
                        args.rot)
        })
        break
    end

    startLuaCoroutine(Global, 'worker_makeShipBags')
end


tq_makeShipBags = {} -- Task queue
rq_makeShipBags = {} -- Result queue
function worker_makeShipBags() worker(tq_makeShipBags, rq_makeShipBags) end
function task_makeShipBags(args)

    log('Starting Worker:\n' ..
        'bag: ['..tostring(args.shipBag)..']\n',
        '\ntask_makeShipBag')

    -- Set number of ships to clone
    local num = 11
    if shipBag.getName():lower() == 'interceptor' then
        tags = {'Ship', 'Interceptor'}
        num = 8
    elseif shipBag.getName():lower() == 'cruiser' then
        tags = {'Ship', 'Cruiser'}
        num = 4
    elseif shipBag.getName():lower() == 'dreadnought' then
        tags = {'Ship', 'Dreadnought'}
        num = 2
    elseif (shipBag.getName():lower() == 'starbase' or
            shipBag.getName():lower() == 'deathmoon') then
        tags = {'Ship', 'Starbase'}
        num = 4
    end
    ships = {}
    for x = 1, num do
        table.insert(ships, shipBag.clone())
    end

    shipBag.setScale(shipBag.getScale() * 1.4)
    shipBag.setCustomObject({
        type = 6, -- Turn it into a bag
    })
    shipBag = shipBag.reload()

    while (shipBag.spawning or
           table.anySpawning(ships)) do
        log('Yielding while spawning', 'task_makeShipBags')
        coroutine.yield(0)
    end

    -- log('Settings tags on', 'task_makeShipBags')
    for _, ship in pairs(ships) do
        ship.setTags(tags)
        shipBag.putObject(ship)
    end

end
