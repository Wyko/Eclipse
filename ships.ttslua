function placePlayerShips(PlayerColor, faction)
    local s_pos = getPlayerShipsPositions(PlayerColor)

    table.insert(tq_placePlayerShips, 1,
    {
        task        = task_placePlayerShips,
        s_pos       = s_pos,
        PlayerColor = PlayerColor,
        faction     = faction,
    })
    startLuaCoroutine(Global, 'worker_placePlayerShips')
end


tq_placePlayerShips = {} -- Task queue
rq_placePlayerShips = {} -- Result queue
function worker_placePlayerShips() return worker(tq_placePlayerShips, rq_placePlayerShips) end
function task_placePlayerShips(args)
    -- Get the ship out of the bag
    local ship_templates = getShipsFromBag(args.faction.Box_GUID, args.s_pos.shipPos)

    -- If nothing was found, fall back to the old terran ships
    if tableLen(ship_templates) == 0 then
        ship_templates = getShipsFromBag('c9573a', args.s_pos.shipPos)
    end

    -- Remove any unfound types
    for ship_type, _ in pairs(ship_templates) do
        if ship_templates[ship_type] == nil
           or ship_templates[ship_type] == false then
            log('Did not find ['..ship_type..']; Removing from possible ships')
            ship_templates[ship_type] = nil
        end
    end

    local ship_bags = makeShipBags{
        ship_templates= ship_templates,
        shipPos= args.s_pos.shipPos,
        rot = args.s_pos.rot,
        PlayerColor = args.PlayerColor,
    }

    -- Fill the ship bags with clones of the original ship
    fillShipBags{
        ship_templates= ship_templates,
        ship_bags = ship_bags
    }

    -- Return the ship templates
    log(ship_templates, 'task_placePlayerShips')
    for ship_type, ship in pairs(ship_templates) do
        log('task_placePlayerShips: Destroying template ['..ship_type..']')
        ship.destruct()
        log('task_placePlayerShips: Finished destroying template ['..ship_type..']')
    end

    return true
end


function makeShipBags(args)
    -- Make a ship bag for each ship type
    local ship_bag_script = [[
        function onObjectLeaveContainer(container, obj)
            if container == self then
                obj.setColorTint(container.getColorTint())
                obj.setRotation(self.getRotation())
                obj.setDescription(self.getColorTint():toString())
            end
        end
        function filterObjectEnter(obj)
            -- Only accept matching ships
            for _, tag in pairs(obj.getTags()) do
                if not self.hasTag(tag) then
                    return false
                end
            end
            return true
        end
    ]]

    local bags = {}
    local reloaded_bags = {}
    for ship_type, ship in pairs(args.ship_templates) do
        bags[ship_type] = ship.clone({position = args.shipPos[ship_type]})
        log(ship_type..': ' .. tostring(dump(args.shipPos[ship_type])))
    end

    -- Wait while they spawn
    while anySpawning(bags) do
        log('Waiting while bags spawn', 'makeShipBags')
        coroutine.yield(0)
    end

    for ship_type, ship in pairs(bags) do
        bags[ship_type].setScale(bags[ship_type].getScale() * 1.4)
        bags[ship_type].setRotation(args.rot)
        bags[ship_type].setPosition(args.shipPos[ship_type])
        bags[ship_type].setColorTint(Color.fromString(args.PlayerColor))
    end


    for ship_type, ship in pairs(bags) do
        while (not bags[ship_type].resting) do
            for i = 1, 10 do coroutine.yield(0) end
        end

        bags[ship_type].setName(ship_type .. ' Bag')
        bags[ship_type].setLock(true)
        bags[ship_type].setTags({'Ship', ship_type})
        bags[ship_type].setLuaScript(ship_bag_script)

        -- bags[ship_type] is an object
        bags[ship_type].setCustomObject({
            type = 6, -- Turn it into a bag
        })

        -- Reload it so it updates it's new state
        bags[ship_type].reload()
    end

    -- Wait while they spawn
    for i=1, 2 do coroutine.yield(0) end


    for ship_type, bag in pairs(bags) do
        bags[ship_type] = getObjectFromGUID(bags[ship_type].getGUID())
        log(bags[ship_type], 'ship_bag' )
    end

    count = 0
    while ((anySpawning(bags) or (next(bags) == nil)) and count < 100) do
        log('Waiting while bags reload', 'makeShipBags')
        count = count + 1
        coroutine.yield(0)
    end
    log(bags, 'ship_bags')

    return bags
end


function fillShipBags(args)
    local ship_bags = args.ship_bags

    for ship_type, ship in pairs(args.ship_templates) do
        -- Set number of ships to clone
        local num = 11
        if ship_type:lower() == 'interceptor' then
            tags = {'Ship', 'Interceptor'}
            num = 8
        elseif ship_type:lower() == 'cruiser' then
            tags = {'Ship', 'Cruiser'}
            num = 4
        elseif ship_type:lower() == 'dreadnought' then
            tags = {'Ship', 'Dreadnought'}
            num = 2
        elseif ship_type:lower() == 'starbase' or
            ship_type:lower() == 'deathmoon' then
            tags = {'Ship', 'Starbase'}
            num = 4
        end

        log('fillShipBags: Making ['..num..'] ships of type ['..ship_type..']')

        ships_to_add = {}
        for x = 1, num do
            log('Cloning ' ..tostring(ship.getName()))
            x = ship.clone()
            x.setTags(tags)
            ship_bags[ship_type].putObject(x)
        end
    end
end


function getPlayerShipsPositions(PlayerColor)
    log('Getting player positions')
    local PlayerPosition = Player[PlayerColor].getHandTransform(int).position
    PlayerPosition.y = 2
    -- Define ship positions and rotations
    local InvPos = boardInvertFactor(_, PlayerPosition)
    local shipPos = {
        ['Interceptor'] = PlayerPosition + Vector(-19*InvPos, 0, 10*InvPos),
        ['Cruiser'] = PlayerPosition + Vector(-14*InvPos, 0, 10*InvPos),
        ['Dreadnought'] = PlayerPosition + Vector(-19*InvPos, 0, 6*InvPos),
        ['Starbase'] = PlayerPosition + Vector(-14*InvPos, 0, 6*InvPos),
        ['Deathmoon'] = PlayerPosition + Vector(-14*InvPos, 0, 6*InvPos),
    }

    local rot
    if PlayerPosition.z < 0 then
        rot = vector(0,180,0)
    else
        rot = vector(0,0,0)
    end

    log('Finished getting player positions')
    return {
        shipPos = shipPos,
        rot     = rot,
    }
end


function getShipsFromBag(ContainerOrGUID, shipPos)
    if type(ContainerOrGUID) == 'string' then
      container = getObjectFromGUID(ContainerOrGUID)
    else
      container = ContainerOrGUID
    end

    ships = {}
    for ship_type, _ in pairs(shipPos) do
        ships[ship_type] = SeekAndTake(ship_type,
                                       container,
                                       {position = Vector(0,-10,0)})
        if ships[ship_type] == false then ships[ship_type] = nil end
    end

    while anySpawning(ships) do
        coroutine.yield(0)
    end

    log(container, 'getShipsFromBag')
    log(ships, 'getShipsFromBag')
    for ship_type, ship in pairs(ships) do
        log(ship, 'getShipsFromBag')
        if ship ~= false and ship ~= nil then
            container.putObject(ship.clone())
        end
    end

    coroutine.yield(0)

    log(ships, 'getShipsFromBag')
    return ships
end
