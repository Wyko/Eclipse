function getTilesWithCombat()
    local hexes = {}

    function make_combat_table(t)
        -- Make a table of all the ships on each hex
        for _, ship in ipairs(t) do
            local hex = castAndCheckForTag(ship.getPosition(), 'hex')

            -- Create a table for each Hex that stores the ships on it
            if hex then
                if hexes[hex] == nil then hexes[hex] = {} end
                table.insert(hexes[hex], ship)
            end
        end
    end

    local ships = getItemsInZone{zone= TableZone, tag='Ship'}
    local ancients = getItemsInZone{zone= TableZone, tag='Ancient'}
    local aliens = getItemsInZone{zone= TableZone, tag='Alien Not Draco Friend'}

    make_combat_table(ships)
    make_combat_table(ancients)
    make_combat_table(aliens)

    -- Check each hex to see if ships belonging to different players are on it
    local combat_hexes = {}
    for h, ships in pairs(hexes) do
        local required_num = 2 -- Number of combatants required

        -- Check if multiple players have a ship in the hex
        local players_on_hex = {}
        for _, ship in ipairs(ships) do
            if ship.hasTag('Ancient') then
                players_on_hex['Ancients'] = true

            elseif ship.hasTag('Alien Not Draco Friend') then
                players_on_hex['Aliens'] = true

            else
                players_on_hex[getOwnerOfColoredObject(ship)] = true
            end
        end

        -- Check if Draco is with an ancient
        local c = ownerOfRace('Descendants of Draco')
        if (c ~= nil and
            players_on_hex[c] == true and
            players_on_hex['Ancients'] == true
            ) then

            required_num = required_num + 1
        end

        if tableLen(players_on_hex) >= required_num then
            table.insert(combat_hexes, h)
        end
    end

    highlightTilesWithCombat(combat_hexes)
end

function highlightTilesWithCombat(combat_hexes)
    for _, hex in ipairs(getObjectsWithTag('Hex')) do
        hex.highlightOff()
    end

    local highest = -1
    for i, hex in pairs(combat_hexes) do
        hex.highlightOn('Red', 6)
        local num = hex.getVar('number')
        if num > highest then
            highest = num
            highest_hex = hex
        end
    end
    if highest_hex ~= nil then
        -- Flash the first combat hex
        startLuaCoroutine(Global, 'co_fade_highlight')
    end
end

function co_fade_highlight(obj, speed, seconds)
    -- Coroutine to highlight an object with a color that fades in and out
    speed = speed or 1
    obj = obj or highest_hex
    seconds = seconds or 6

    -- Set the amount of time to run for
    local end_time = os.clock() + seconds
    while (os.clock() < end_time) do

        -- Fade the highlight in from nothing
        for x = 0, 100, speed do
            local c = color(0.905, 0.898, 0.172, x*0.01)
            obj.highlightOn(c)
            coroutine.yield(0)
        end

        -- Fade the highlight back out
        for x = 100, 0, -1*speed do
            local c = color(0.905, 0.898, 0.172, x*0.01)
            obj.highlightOn(c)
            coroutine.yield(0)
        end
    end
    highest_hex = nil
    obj.highlightOff()
    return 1
end
