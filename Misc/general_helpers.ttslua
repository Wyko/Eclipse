function setTechRotation(bag, obj)
    -- Set tech tile rotation when they exit a bag
    if bag.hasTag('Tech Tile') then
        obj.setRotation(bag.getRotation())
    end
end

function lockSideTables()
    -- Lock all the side tables --
    for _, id in pairs(TableGUIDs) do
        getObjectFromGUID(id).interactable = false
    end
end


function blip(obj)
    obj.scale(24/25)
    Wait.time(function() obj.scale(25/24) end, 0.1)
end

function rest(obj)
    if obj ~= nil then return obj.resting end
    return false
end

function dump(o)
    if type(o) == 'table' then
       local s = '{ '
       for k,v in pairs(o) do
          if type(k) ~= 'number' then k = '"'..k..'"' end
          s = s .. '['..k..'] = ' .. dump(v) .. ','
       end
       return s .. '} '
    else
       return tostring(o)
    end
end


 function discardRep(obj)
     -- Put unchosen reputation tiles back into the bag --
     if obj ~= nil then
         if obj.getName() == "Reputation" then
             obj.setRotation(Vector(0,270,180))
             ReputationBag.putObject(obj)
             Wait.time(function() ReputationBag.shuffle() end, 0.5, 1)
         end
     end
 end

function triggerFunctionIfResting(obj, pointerFnc, waitSeconds)
    -- Delay execution of a function until an object is resting
    waitSeconds = waitSeconds or 1
    Wait.time(
        function()
            Wait.condition(pointerFnc, function() return obj.resting end )
        end,
        waitSeconds
    )
end

function SeekAndTake(ObjectName, ContainerOrGUID, TakeParams)
   -- Search a container for all objects with matching names, then take out a random one
   TakeParams = TakeParams or {}
   TakeParams.guid = '000000'
   local container
   local guids = {}
 --   log('GUID: '..tostring(ContainerOrGUID))
   if type(ContainerOrGUID) == 'string' then
     container = getObjectFromGUID(ContainerOrGUID)
   else
     container = ContainerOrGUID
   end

   for k,v in pairs(container.getObjects()) do
     if string.find(string.lower(v.name==nil and v.nickname==nil and '' or v.name or v.nickname), string.lower(ObjectName)
     ) then
       table.insert(guids, v.guid)
     --   log('Found name: '..string.lower(v.name==nil and v.nickname==nil and '' or v.name or v.nickname))
     elseif string.find(string.lower(v.description), string.lower(ObjectName)) then
       table.insert(guids, v.guid)
     --   log('Found description: '.. v.description)
     end
   end

   if #guids == 0 then
     log('Did not find '..ObjectName)
     return false
   end

   TakeParams.guid = guids[math.random(#guids)]
   return container.takeObject(TakeParams)
end

function SeekAndClone(ObjectName, ContainerOrGUID, pos, rot, lock)
     rot = rot or Vector(0,0,0)
     local obj = SeekAndTake(ObjectName, ContainerOrGUID, {})
     local putContainer

     if type(ContainerOrGUID) == 'string' then
         putContainer = getObjectFromGUID(ContainerOrGUID)
       else
         putContainer = ContainerOrGUID
     end
     -- log('Position: ' .. tostring(pos))

     if not obj then return false end

     Wait.condition(
         function ()
             local clone = obj.clone()
             clone.setPositionSmooth(pos, false, true)
             clone.setRotationSmooth(rot, false, true)
             triggerFunctionIfResting(
                 clone,
                 function () clone.setLock(lock or false) end
             )

             triggerFunctionIfResting(
                 obj,
                 function ()
                     putContainer.putObject(obj) -- Return the object to the container it was in
                 end
             )
             return clone
         end,
         function ()
             return not obj.spawning
         end,
         10
     )

end

function split (inputstr, sep)
     -- String Split --
     if sep == nil then
             sep = "%s"
     end
     local t={}
     for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
             table.insert(t, str)
     end
     return t
end

function colorInGame(color)
     -- Returns true if a player with the given color is seated in game

     for _, presentColor in pairs(getSeatedPlayers()) do
         if color == presentColor then return true end
     end
     return false
end

function objHasAttribute(args)
    -- Required Args:
    --    obj: The object to check for attributes
    --
    -- Optional Args (At least one is required)
    --    name (string): Checks if object has the specified name
    --    tag (string): Checks if object has the specified tag
    --    guid: Checks if object matches the specified GUID

    -- Error checking
    assert(args.obj ~= nil)

    if (
        args.obj.getName() == args.name or
        (args.tag ~= nil and args.obj.hasTag(args.tag))
        ) then
        return true
    end

    return false
end

function itemInZone(zone, obj)
     -- Returns true if the given object is present inside the given scripting
     -- zone

     for _, tmp_obj in pairs(getObjectFromGUID(zone).getObjects()) do
         if tmp_obj.getGUID() == obj.getGUID() then
             return true
         end
     end
     return false
end

function getItemsInZone(args)

    -- Error checking
    assert(args.zone ~= nil)
    assert((args.name ~= nil or args.tag ~= nil))

    -- Get the zone
    local zone = args.zone
    if type(zone) == 'string' then
        local zone = getObjectFromGUID(zone)
    end

    -- Get all objects in the zone matching the given name or tag
    local results = {}
    for _, tmp_obj in pairs(zone.getObjects()) do
        if objHasAttribute{obj= tmp_obj, name= args.name, tag= args.tag } then
            table.insert(results, tmp_obj)
        end
    end
    return results
end

function getRelativePosition(object, local_pos)
    -- This was annoying to figure out. Given a vector which was first found on
    -- on object placed at 0,0,0 with zero rotation, returns the new vector after
    -- the object is moved and / or rotated elsewhere. Ignores scale!

    if type(local_pos) == 'table' then
        local_pos = Vector(local_pos)
    end
    assert(object ~= nil, "getRelativePosition: Object is nil")
    assert(local_pos ~= nil, "getRelativePosition: local_pos is nil for "..object.getName())

    local scaled_pos = vector(
        local_pos.x / object.getScale().x,
        local_pos.y / object.getScale().y,
        local_pos.z / object.getScale().z)
    return object.positionToWorld(scaled_pos)
end

function debugAssert(...)
    -- Just a little wrapper for a common assert

    local arg = {...}
    if DEBUG then
        assert(unpack(arg))
    end
end


function onObjectNumberTyped(object, player_color, number)
    if object == ReputationBag and number > 5 then
        broadcastToColor(
            "You may only draw a maximum of 5 reputation tiles.",
            player_color)
        return true
    end
end

function getObject(objOrGUID)
    -- Given either an object or a GUID, return an object or return nil

    if type(objOrGUID) == 'string' then
        -- Get the object if a GUID was supplied
        return getObjectFromGUID(objOrGUID)

    elseif type(objOrGUID) == 'userdata' then
        -- Return the object if one was supplied
        return objOrGUID

    else
        log('Error: Invalid object: '..tostring(objOrGUID), 'getObject')
        return nil
    end
end

function hasFunction(obj, funcName)
    -- Verifies whether a given object contains a function with the given name

    obj = getObject(obj)
    assert(type(funcName) == 'string')
    assert(obj ~= nil)

    local func = obj.getVar(funcName)
    if type(func) ~= 'function' then return false end
    return true
end

function removeAllButtons(obj)
    -- Removes all buttons on an object

    local buttons = obj.getButtons()
    if buttons == nil then return end

    for _, button in ipairs(buttons) do
        obj.removeButton(button.index)
    end
end

function tableLength(T)
  local count = 0
  for _ in pairs(T) do count = count + 1 end
  return count
end
