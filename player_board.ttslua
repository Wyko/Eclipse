function boardInvertFactor(board)
    -- Checks which side of the table it's on
    if board.getPosition().z > 0 then
        return -1
    else
        return 1
    end
end

function setupPlayerInfluence(board, PlayerColor, amountOfInfluence)
    -- Spawns influence discs on the player's board

    board.setLock(true)

    local NumberDiscs = (amountOfInfluence - 1) or 12
    local lastSpawn = 14-NumberDiscs

    -- Eridani receive -2 influence
    if board.getGUID() == 'eeefaa' then
        NumberDiscs = 10
    end

    -- place influence discs, omitting the last spot, since it goes to the
    -- homeworld
    for i=13, lastSpawn, -1 do
        local pos = getRelativePosition(board, influenceSpaces[i])
        spawnInfluenceDisc(pos, PlayerColor)
    end

    spawnReturnInfluenceButton(board)
end

function spawnInfluenceDisc(pos, color)

    local influenceBag= getObjectFromGUID(InfluenceDiscs_GUID)
    local disc = influenceBag.takeObject()

    Wait.condition(
        function ()
            disc.setColorTint(color)
            disc.setTags({'Influence'})
            -- log(pos, 'spawnInfluenceDisc:pos')
            if pos then disc.setPosition(pos) end
        end,
        function ()
            return (not disc.spawning)
        end,
        4
        )

    return disc
end

function spawnReturnInfluenceButton(board)
    -- Spawns the Return Influence button underneath each player's board

    local InvPos = boardInvertFactor(board)
    local data = {
        click_function = "returnInfluenceDiscs",
        function_owner = self,
        label = "Return Influence",
        position = {-1.18, 0.09, 1.1},
        scale = {0.3, 0.3, 0.3},
        width = 955,
        font_size = 110,
        color = {0.7573, 0.7573, 0.7573, 1}
    }

    board.createButton(data)
end

function returnInfluenceDiscs(board, color)
    -- Returns influence discs from the action spots on the board and the pass
    -- marker to the influence track for each player

    -- if DEBUG then
    --     placePyxisResources{color='White'}
    --     return nil
    -- end

    local InvPos = boardInvertFactor(board)

    -- First get all discs on the player board
    local boardObjects = Physics.cast({
        origin = board.getPosition() + vector(-7.77*InvPos, 0, -5.25*InvPos),
        type = 3,
        direction = {0,1,0},
        max_distance = 4,
        size = {7.40, 1.69, 2.36},
        -- debug = true
    })
    local discs = objectsHitByCast(boardObjects, 'Influence Disc')

    -- Now get all discs on the reaction board
    local passCard = getObjectFromGUID(PassCards[ownerOfBoard(board).color])
    local reactionObjects = Physics.cast({
        origin = passCard.getPosition(),
        type = 3,
        direction = {0,1,0},
        max_distance = 0,
        size = passCard.getBounds()['size'] + Vector(0, 5, 0),
        -- debug = true
    })
    local reactionDiscs = objectsHitByCast(reactionObjects, 'Influence Disc')

    -- Add all the discs together in one table
    for _, v in ipairs(reactionDiscs) do
        table.insert(discs, v)
    end

    -- If there are no discs to return, exit
    if not next(discs) then
        log('No discs to return.')
        return false
    end

    local space = 14
    InvPos = InvPos * -1
    -- Return all the discs
    for _, disc in pairs(discs) do
        space = getNextOpenInfluenceSpace(board, space - 1)
        disc.setPositionSmooth(
            Vector(board.getPosition() + (influenceSpaces[space] * Vector(InvPos, 1, InvPos))),
            false,
            true
        )
    end
end

function getNextOpenInfluenceSpace(board, start)
    -- Get the next highest empty influence space after and including `start`

    start = start or 13
    if start <= 1 then return 1 end

    -- Using an extra -1 multiplier because I messed up the initial position
    -- tables and I can't be bothered to fix it :)
    local InvPos = boardInvertFactor(board) * -1

    for i = start, 2, -1 do
        local influenceObjects = Physics.cast({
            origin = board.getPosition() + (influenceSpaces[i] * vector(InvPos, 1, InvPos)),
            type = 3,
            direction = {0,1,0},
            max_distance = 0,
            size = {0.2, 5, 0.2},
            -- debug = true
        })
        if not next(objectsHitByCast(influenceObjects, 'Influence Disc')) then
            log('Next open influence space: '.. tostring(i))
            return i
        end
    end

    -- Return the first space if everything else is full, stacking tiles if needed
    log('Next open influence space: 1')
    return 1
end

function getNextUnusedInfluence(boardOrColor)
    -- Returns the next influence disc on the track

    local board
    if type(boardOrColor) == 'string' then
        board = getBoardBelongingToColor(boardOrColor)
    else board = boardOrColor end
    assert(board ~= nil, "getNextUnusedInfluence: No board found")

    for _, space in pairs(influenceSpaces) do
        local pos = getRelativePosition(board, space)
        local disc = castAndCheckForTag(pos, 'Influence Disc')
        if disc ~= nil then
            return disc
        end
    end
end

function getBoardInitialTechs(board)
    -- Checks the script on each player board for the initialTechs variable,
    -- then clones techs from the tech bag to fill that board with it's starting
    -- tech

    local techs = board.getTable('initialTechs')
    if not techs then
        log('No initial techs to add.')
        return false
    end

    for _, tech in ipairs(techs) do
        putTechOnTrack(tech.name,tech.track,board,tech.spot, true)
    end
end

function discoverBoardsToSetRace(zone, obj)
    -- Discover player boards --
    if not string.find(zone.getName(), "Player Board Zone") or
    not obj.hasTag("Board") then
        return false
    end

    local color = split(zone.getName(), " ")[1] -- Get the player's name
    if PlayerRace[color] ~= obj.getName() then

        -- Restart the timer on the set race function
        if boardSelectCallbackFunction[color] then
            Wait.stop(boardSelectCallbackFunction[color])
        end

        boardSelectCallbackFunction[color] =
            Wait.time(function() setRace(color, zone, obj) end, 2, 0)
    end
end

function checkIfPlayerChangedBoards(zone, obj)
    -- Triggered when a player board leaves a board zone. Check to see if we
    -- need to reset the player's race

    -- Break out if we're not dealing with player boards or board zones
    if (string.find(zone.getName(), "Player Board Zone") == nil or
        not obj.hasTag("Board")) then
        return false
    end

    -- Get the player's color
    local color = split(zone.getName(), " ")[1]

    -- If the player's currently saved race is the same as the race they picked
    -- then trigger the race reset timer. If the timer runs out and the board
    -- is still absent from the zone, return the player markers and clear the
    -- saved race variables.
    if PlayerRace[color] == obj.getName() then
        Wait.time(function() resetRace(color, zone, obj) end, 5, 0)
    end
end

function resetRace(playerColor, zone, obj)

    -- Check if the board is still in its player's zone. If so, cancel the reset
    for _, v in pairs(zone.getObjects()) do
        if v.getGUID() == obj.getGUID() then -- Check if the board is still in the zone
            return false
        end
    end

    -- Don't spam the chat in case multiple checks were started
    if PlayerRace[playerColor] == obj.getName() then
        printToAll(playerColor .. " returned " .. obj.getName(), playerColor)
    end

    PlayerRace[playerColor] = nil
    if PlayerMarkers[playerColor] ~= nil then
        PlayerMarkers[playerColor].setColorTint(Color.White)
        PlayerMarkers[playerColor].setDescription('')

        -- Return the player marker to the bag
        turnBag.putObject(PlayerMarkers[playerColor])
    end
    PlayerMarkers[playerColor] = nil
end

function setRace(playerColor, zone, obj)
    -- Check if the player board is still in the zone and didn't just move
    -- through it, then lock it

    -- Check if the board is still in the zone
    for _, v in pairs(zone.getObjects()) do
        if v.getGUID() == obj.getGUID() then

            -- Only print to chat if this is the first time the player selects
            -- this race (in case they move their board, etc)
            if PlayerRace[playerColor] ~= obj.getName() then
                broadcastToAll(playerColor .. " has picked " .. obj.getName(),
                               playerColor)
            end

            PlayerRace[playerColor] = obj.getName()
            PlayerMarkers[playerColor] = takePassMarker(playerColor)
            obj.setLock(true)
            break
        end
    end
end

function playersWithoutBoards()
    players = {}
    for _, color in pairs(getSeatedPlayers()) do
        if not hasPlayerBoard(color) then
            table.insert(players, color)
        end
    end
    return players
end

function ownerOfBoard(board)
    -- Returns the Player owner of a particular board

    if type(board) ~= 'string' then
        board = board.getGUID()
    end

    -- Search through every board zone for the specified board
    for color, guid in pairs(PlayerBoardZones) do
        for _, obj in pairs(getObjectFromGUID(guid).getObjects()) do
            if obj.getGUID() == board then
                return Player[color]
            end
        end
    end
end

function hasPlayerBoard(color)
    -- Returns the board if the given player has a board in front of them

    local zone = getObjectFromGUID(PlayerBoardZones[color])

    for _, obj in pairs(zone.getObjects()) do
        if obj.hasTag('Board') then
            return obj
        end
    end
    return false
end

function getBoardBelongingToColor(color)
    -- Returns the player board belonging to the given color

    local zone = getObjectFromGUID(PlayerBoardZones[color])
    -- log(zone, 'getBoardBelongingToColor')
    -- log(zone.getObjects(), 'getBoardBelongingToColor')

    for _, obj in pairs(zone.getObjects()) do
        if obj.hasTag('Board') then
            return obj
        end
    end
end


function getAllPlayerBoards()
    -- Returns a table of all player boards in the form of {color = object}

    local results = {}

    -- Go through each player board zone
    for color, zone_guid in pairs(PlayerBoardZones) do

        -- Get all the objects in the zone
        local zone = getObjectFromGUID(zone_guid)
        for _, obj in pairs(zone.getObjects()) do

            if obj.hasTag('Board') then
                results[color] = obj
            end
        end
    end

    return results
end
