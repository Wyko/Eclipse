function hideAndLockStuff()
    HideObjects = getObjectsWithTag('Player Part Bag')

    table.insert(HideObjects, getObjectFromGUID(materialsResourceMarker_GUID))
    table.insert(HideObjects, getObjectFromGUID(moneyResourceMarker_GUID))
    table.insert(HideObjects, getObjectFromGUID(scienceResourceMarker_GUID))
    table.insert(HideObjects, getObjectFromGUID('8f4c6b')) -- Influence discs
    table.insert(HideObjects, getObjectFromGUID('9d696e')) -- Turn order bag
    table.insert(HideObjects, getObjectFromGUID(nextRoundButton_GUID))

    for _, race in pairs(factions) do
        table.insert(HideObjects, getObjectFromGUID(race.Box_GUID))
        table.insert(DisableGUIDs, getObjectFromGUID(race.Box_GUID))
    end

    -- disable interactions with tables extensions, game board, influence bag, ...
    for _,GUID in pairs(DisableGUIDs) do
        object = getObjectFromGUID(GUID)
        if object ~= nil then object.interactable = false end
    end

    -- hide
    for _, obj in pairs(HideObjects) do
        obj.setInvisibleTo({"Blue", "White", "Red", "Yellow", "Green", 'Purple'})
    end
end

function fillWithWarp()
    for _, color in ipairs(possibleColors) do
        local found = false
        for _, seatedColor in ipairs(getSeatedPlayers()) do
            if color == seatedColor then
                found = true
            end
        end

        if not found then placeWarpTile(warpSpots[color]) end
    end
end

function placeWarpTile(spot)
    warpBag.takeObject({
        position = spot.position,
        rotation = spot.rotation,
        callback_function = function (obj)
            obj.setLock(true)
        end
    })
end

function fillWithGuardians()
    -- if #getSeatedPlayers() < 2 then
    --     printToAll('Must have at least two players to fill with guardians.')
    --     return false
    -- end

    for _, color in ipairs(possibleColors) do
        local found = false
        for _, seatedColor in ipairs(getSeatedPlayers()) do
            if color == seatedColor then
                found = true
            end
        end

        if not found then placeGuardianTile(guardianSpots[color]) end
    end
end

function movePlayersToColors(targetColors)
    -- Given a table of colors {['Red'] = true, ...} iterate through all
    -- seated players and move the first one not in the table to the color

    local players = getSeatedPlayers()
    local i, plrToMove = next(players, nil)
    while i do
        -- Check if the seated player is not already seated at a color we need
        if targetColors[plrToMove] == nil then
            -- Move the player to a color in 'colors' that isn't already seated
            for c, _ in pairs(targetColors) do
                if not Player[c].seated then
                    Player[plrToMove].changeColor(c)
                end
            end
        end
        i, plrToMove = next(players, i)
    end
end

function setupHybridTwoPlayer()
    if not Player['Blue'].seated or Player['Yellow'].seated then
        broadcastToAll('For a two-player hybrid setup, players will need to ' ..
        'be seated across from one another at Yellow and Blue.')

        movePlayersToColors({Yellow = true, Blue = true})
    end

    placeWarpTile(warpSpots['Purple'])
    placeWarpTile(warpSpots['Red'])
    placeGuardianTile(guardianSpots['White'])
    placeGuardianTile(guardianSpots['Green'])
end

function placeGuardianTile(spot)
    guardianBag.takeObject({
        position = spot.position,
        rotation = spot.rotation,
        callback_function = function (obj)
            obj.setLock(true)
        end
    })
    discoveryBag.takeObject({
        position = spot.position+Vector(0,1,0),
        rotation = spot.rotation+Vector(0, -45, 180),
    })

    activeGuardianBag.takeObject({
        position = spot.position+Vector(0,2,0),
        rotation = spot.rotation
    })
    guardianModelBag.takeObject({
        position = spot.position+Vector(0,3,0),
        rotation = spot.rotation
    })
end

function showNextRoundButton()
    getObjectFromGUID(nextRoundButton_GUID).setInvisibleTo({})
    getObjectFromGUID(nextRoundButton_GUID).interactable = true
end

function tossOuterSectors()
    -- Toss extra sector 3 tiles for setup --
    local s = Sector3Bag.takeObject({rotation = {180,90,0}})
    ExtraS3Bag.putObject(s)
end

function basicSetup2(parameters)
    -- Handle basic player setup

    local PlayerColor = parameters.PlayerColor
    local FactionName = parameters.FactionName
    local faction = factions[FactionName]

    local Box_GUID = parameters.BoxGuid or faction.Box_GUID
    local Box = getObjectFromGUID(Box_GUID)
    assert(Box ~= nil)
    assert(Box.getPosition() ~= nil)
    assert(faction.numStartingInfluence ~= nil)

    factions[FactionName].available = false

    --     log('Starting basic setup for '..tostring(PlayerColor))
    -- check if the player already selected a faction
    if PlayerRace[PlayerColor] ~= nil then
        print(PlayerRace[PlayerColor], ' already selected. You can only select one faction.')
        return false
    end

    PlayerRace[PlayerColor] = FactionName .. ' '    -- A space so it can be reset in setRace

    local PlayerPosition = Player[PlayerColor].getHandTransform(int).position
    PlayerPosition.y = 0.15

    local SpawnPos=Vector(Box.getPosition()) + Vector(0,5,0)
    local InvPos = -1

    local takeParams = {position = SpawnPos, rotation = vector(0,0,0)}
    if PlayerPosition.z < 0 then
        takeParams.rotation = vector(0,180,0)
        InvPos = 1
    end

    local destination

    -- take fleet and position it
    -- Object = SeekAndTake('Fleet', Box, takeParams)
    -- if (Object~=false) then
    --         destination = PlayerPosition + Vector(-16.5*InvPos, -0.14, 3*InvPos)
    --         Object.setPositionSmooth(destination,false, true)
    --         Object.setColorTint(Color.fromString(PlayerColor))
    --         Object.setDescription('These are custom fleet units for your race. If you want, you can use these to replace the default ship models.')
    -- end

    placePlayerShips(PlayerColor, factions[FactionName])

    -- Take an Ambassador and Discovery Board
    local a = a_and_disc_bag.takeObject({
        position = PlayerPosition + Vector(16.66*InvPos, -0.14, 13.9*InvPos),
        rotation = takeParams.rotation,
        smooth = false,
        callback_function = function (obj)
            obj.setLock(true)
        end
    })
    player_ad_board[PlayerColor] = a

    triggerFunctionIfResting(a, function ()
        place_ambassadors(Box, takeParams, PlayerColor)
        spawnExtraInfluence(PlayerColor, FactionName)
    end)

    -- take player board and position it
    local board = SeekAndTake('Player Board', Box, takeParams)
    if (board~=false) then
        destination = PlayerPosition + Vector(0, -0.14, 19*InvPos)
        board.setPositionSmooth(destination,false, true)

        triggerFunctionIfResting(board,
            function()
                log('Setting up board for ' .. tostring(PlayerColor))
                setupPlayerInfluence(board,
                                     PlayerColor,
                                     faction.numStartingInfluence)
                getBoardInitialTechs(board)

                -- Check if any faction-specific functions are needed
                local _func = faction.add_functions.basicSetupAfterBoard
                if _func ~= nil then
                    Global.call(_func, {color= PlayerColor, board= board})
                end
            end)
    end

    -- take home world and position it
    local homeworld = SeekAndTake('Homeworld', Box, takeParams)
    if (homeworld~=false) then
        -- destination = PlayerPosition + Vector(-16.5*InvPos, 0, 6*InvPos)
        -- Object.setPositionSmooth(destination,false, true)
        Wait.condition(
            function () placeHomeworld(homeworld, PlayerColor) end,
            function () return (not homeworld.spawning) end
        )

        -- Setup race
        Wait.condition(
            function () raceSetup(homeworld, PlayerColor, board.getName()) end,
            function () return homeworld.resting end
        )
    end

    -- place colony ships
    PlaceColonyShips(PlayerColor, FactionName)


    return true
end


function lockAndColor(obj, color)
    obj.setLock(true)
    obj.setColorTint(color)
end

function PlaceColonyShips(PlayerColor, faction)
  -- Search a container for all colony ships and place them in front of the player
  local offset
  local takeParams = {}
  local PlayerPosition = Player[PlayerColor].getHandTransform(int).position
  local Inv = -1
  PlayerPosition.y = 0.15
  if PlayerPosition.z < 0 then
      Inv = 1
      takeParams.rotation = vector(0,180,0)
  end

  local numShips = factions[faction].colonyShips

  local StartPosition = PlayerPosition + Vector(-22.4*Inv, 0, 15*Inv)
  if numShips ~= 3 then StartPosition = StartPosition + Vector(1.45*Inv, 0, 0) end
  if numShips > 3 then StartPosition = StartPosition + Vector(0, 0, 0) end

  for k = 1, numShips do
      local shipTile = colonyShipBag.takeObject(takeParams)

      if k>2 and numShips>3 then offset = Vector((k-2)*2.9*Inv, 0, -2*Inv)
      else offset = Vector(k*2.9*Inv, 0, 0) end
      shipTile.setPositionSmooth(StartPosition + offset, false, true)
    end
end

function place_ambassadors(Box, takeParams, PlayerColor)
    -- if #getSeatedPlayers() <= 3 then return false end

    -- take ambassador tiles and position them
    local tiles = SeekAndTake('Ambassador', Box, takeParams)
    local board = player_ad_board[PlayerColor]

    local positions = board.getTable('Ambassador_positions')
    assert(positions ~= nil)

    local place = 1
    if (tiles~=false) then

        local tile
        local rot = board.getRotation()
        while tiles.getQuantity() > 1 do
            log(tiles.getQuantity(), 'place_ambassadors:num')
            local pos = positions[place].position
            tiles.takeObject({
                position          = board.positionToWorld(pos),
                rotation          = rot,
                callback_function = function (obj)
                    obj.setTags({'Ambassador'})
                    obj.use_grid = false
                end
            })
            place = place + 1
            if tiles.remainder != nil then tile = tiles.remainder end
        end

        local pos = positions[place].position
        tile.setPositionSmooth(board.positionToWorld(pos))
        tile.setRotation(rot)
        tile.setTags({'Ambassador'})
        tile.use_grid = false
    end
end


function isOngoingGame()
    -- Returns true is this is an ongoing game; For instance, if the game was
    -- loaded from a save or rewound in time.
    local round = getCurrentRound()
    if round ~= 0 then return true end
end

function shuffleEverything()
    -- Shuffle all bags and stacks --
    TechBag.shuffle()
    ReputationBag.shuffle()
    DiscoveryBag.shuffle()
    Sector1Bag.shuffle()
    Sector2Bag.shuffle()
    Sector3Bag.shuffle()
    OutpostBag.shuffle()
    AmbassadorBag.shuffle()
end

function setupTiles(players)
    -- Arrange various tiles for first turn setup.
    local trim = Sector3Bag.getQuantity() - outerSectors[players]
    if trim > 0 then
        Wait.time(tossOuterSectors, 0.2, trim)
    end
    local d = DiscoveryBag.takeObject({rotation = {180,-45,0}})
    d.setPositionSmooth(Vector(0, 2, 0), false, false)

    setup_minor_species()
end

function setup_minor_species()
    -- Set up the minor species board
    board = getObjectFromGUID(Minor_Species_Board_GUID)
    for i=1,4 do
        local a = AmbassadorBag.takeObject({rotation = {0,-90,0}})
        pos = board.positionToWorld(
            Minor_Species_Board_positions[i]['position']) + vector(0, 1, 0)
        a.setPositionSmooth(pos, false, false)
    end
end

function saveStartingInfo()
    -- Save the starting information

    start_time = Time.time
    for _, c in pairs(getSeatedPlayers()) do
        players_info[c] = {
            ['steam_name'] = Player[c].steam_name,
            ['steam_id'] = Player[c].steam_id,
        }
    end
end

function setupFirstRound()
    local players = #getSeatedPlayers()
    local round = tonumber(RoundMarker.getDescription()) + 1
    local newTechs = players + 3

    printToAll(string.format("- Setting up for %d players -", players),
    {0.8,0.8,0.8})

    saveStartingInfo()
    pickRandomNPC()
    if setup_options.ranked == true then
        broadcastToAll('[ff0000]Notice[-]: This is a [ff0000]Ranked[-] game')
        printToAll('\nRanked game mode enabled. At the end of the final round, your score will be uploaded and your ranked ELO (player ranking) will be updated.\n\nPlease note that this is still an experimental feature. If you encounter any problems with scoring or uploading (happens automatically during scoring), please make a bug report in the discussions tab of the Steam Workshop page for this mod. Thanks!\n')

    else
        printToAll('Casual game mode enabled. Player scores will not be uploaded.')
    end
    getGameId()

    if setup_options.useWarpTiles then fillWithWarp()
    elseif setup_options.useGuardians then fillWithGuardians()
    elseif setup_options.useHybrid then setupHybridTwoPlayer() end
    if setup_options.useHives then addHives() end


    unflipColonyAndSkippers()
    shuffleEverything()
    setupTiles(players)
    techsToDraw = (players * 2) + 8
    startLuaCoroutine(Global, 'drawMultipleTechs')
    setPassCards()
    advanceRoundMarker(round)
    moveAllPassMarkersOffBoard()
    removeUnusedAreas()
    getObjectFromGUID('516e93').destruct() -- Kill the text box above the button
    showNextRoundButton()
    Wait.time(function () chooseFirstPlayer() end, 5)
end


function chooseFirstPlayer()
    local player_color = getSeatedPlayers()[math.random(1, #getSeatedPlayers())]
    broadcastToAll("Randomly Chosen First Player\n" ..
        cText(Player[player_color].steam_name, player_color) ..
        " (" .. player_color .. ")")
    printToAll("House rules are that this player will be the first to "..
               "pick their race, with players in reverse turn order picking " ..
               "their race afterwards. Then the last person to pick will "..
               "be the first person to play, and turns advance in normal "..
               "turn order. Feel free to ignore this and play your own way!")
    Turns.turn_color = player_color
end


function addHives()
    hive_sector_2 = getObjectFromGUID(hive_sector_2_GUID)
    hive_sector_2.setLock(false)
    hive_sector_3 = getObjectFromGUID(hive_sector_3_GUID)
    hive_sector_3.setLock(false)
    Sector3Bag.putObject(hive_sector_3)
    Sector2Bag.putObject(hive_sector_2)
end

function pickRandomNPC()
        -- Pick random NPCs
        local rt = {0.00, 270.00, 0.00}
        x = getObjectFromGUID('b61460').takeObject({rotation= rt, position= AncientSpot})
        x.setLock(true)
        activeAncientsBag = x

        x = getObjectFromGUID('0a5a7a').takeObject({rotation= rt, position= GuardianSpot})
        x.setLock(true)
        activeGuardianBag = x

        -- Pick a GCDS tile and move the GCDS
        getObjectFromGUID('133a3f').takeObject({rotation= rt, position= GCDSSpot})
        Wait.time(function ()
            getObjectFromGUID('4eed67').setPositionSmooth(Vector(0, 2, 0))
        end, 2)

        npcBag = getObjectFromGUID('5bd793')
        for _, npc in pairs(getObjectsWithTag('Random NPC')) do
            npcBag.putObject(npc)
        end
end

function removeUnusedAreas()
    for color, _ in pairs(PlayerBoardZones) do
        if not colorInGame(color) then
            -- log(color .. " is not in game. Removing.")
            for _, obj in pairs(getObjectsWithTag(color)) do
                -- Remove the player's area
                -- log("Destroying "..obj.getName())
                obj.destruct()

                PassCards[color] = nil
                PlayerBoardZones[color] = nil
                PlayerRace[color] = nil
                passRestingPositions[color] = nil
                PlayerMarkers[color] = nil
            end
        end
    end
end

function spawnExtraInfluence(color, race)
    -- Spawns the extra influence discs
    local influenceBag= getObjectFromGUID(InfluenceDiscs_GUID)
    local extra = getObjectFromGUID(extra_bag_GUID[color])

    local num = 3
    if race == 'Pyxis Unity' then num = 2 end

    local board = player_ad_board[color]
    local positions = board.getTable('Influence_positions')

    for i = 1, num do
        local pos = board.positionToWorld(positions[i].position)
        local disc = spawnInfluenceDisc(pos, color)
    end
end
