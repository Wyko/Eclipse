function hideAndLockStuff()
    HideObjects = getObjectsWithTag('Player Part Bag')

    table.insert(HideObjects, getObjectFromGUID(materialsResourceMarker_GUID))
    table.insert(HideObjects, getObjectFromGUID(moneyResourceMarker_GUID))
    table.insert(HideObjects, getObjectFromGUID(scienceResourceMarker_GUID))
    table.insert(HideObjects, getObjectFromGUID('8f4c6b')) -- Influence discs
    table.insert(HideObjects, getObjectFromGUID('9d696e')) -- Turn order bag
    table.insert(HideObjects, getObjectFromGUID(nextRoundButton_GUID))

    for _, race in pairs(factions) do
        table.insert(HideObjects, getObjectFromGUID(race.Box_GUID))
        table.insert(DisableGUIDs, getObjectFromGUID(race.Box_GUID))
    end

    -- disable interactions with tables extensions, game board, influence bag, ...
    for _,GUID in pairs(DisableGUIDs) do
        object = getObjectFromGUID(GUID)
        if object ~= nil then object.interactable = false end
    end

    -- hide
    for _, obj in pairs(HideObjects) do
        obj.setInvisibleTo({"Blue", "White", "Red", "Yellow", "Green", 'Purple'})
    end
end

function fillWithWarp()
    local warpSpots = {
        Purple = {
            position = Vector(9.12, 1.01, 8.14),
            rotation = Vector(0.00, 59.64, 0.00)
        },
        White = {
            position = Vector(11.60, 1.01, -3.72),
            rotation = Vector(0.00, 119.99, 0.00),
        },
        Yellow = {
            position = Vector(2.58, 1.01, -11.93),
            rotation = Vector(0.00, 179.99, 0.00),
        },
        Red = {
            position = Vector(-9.03, 1.01, -8.19),
            rotation = Vector(0.00, 240.01, 0.00),
        },
        Green = {
            position = Vector(-11.64, 1.01, 3.77),
            rotation = Vector(0.00, 300.11, 0.00),
        },
        Blue = {
            position = Vector(-2.58, 1.06, 11.93),
            rotation = Vector(359.82, 0.01, 359.68),
        },
    }
    local warpBag = getObjectFromGUID('257134')

    for _, color in ipairs(possibleColors) do
        local found = false
        for _, seatedColor in ipairs(getSeatedPlayers()) do
            if color == seatedColor then
                found = true
            end
        end

        if not found then
            warpBag.takeObject({
                position = warpSpots[color].position,
                rotation = warpSpots[color].rotation,
                callback_function = function (obj)
                    obj.setLock(true)
                end
            })
        end
    end
end

function fillWithGuardians()
    local GuardiansSpots = {
        Purple = {
            position = Vector(10.32, 0.96, 5.95),
            rotation = Vector(0.00, 60.01, 0.00),
        },
        White = {
            position = Vector(10.32, 0.96, -5.96),
            rotation = Vector(0.00, 120.00, 0.00),
        },
        Yellow = {
            position = Vector(0.00, 0.96, -11.92),
            rotation = Vector(0.00, 180.86, 0.00),
        },
        Red = {
            position = Vector(-10.32, 0.96, -5.96),
            rotation = Vector(0.00, 240.00, 0.00),
        },
        Green = {
            position = Vector(-10.32, 0.96, 5.96),
            rotation = Vector(0.00, 300.01, 0.00),
        },
        Blue = {
            position = Vector(0.00, 0.96, 11.92),
            rotation = Vector(0.00, 359.32, 0.00),
        },
    }

    local guardianBag = getObjectFromGUID('54fe91')
    local guardianModelBag = getObjectFromGUID('19e48c')
    local discoveryBag = getObjectFromGUID(DiscoveryBag_GUID)

    if #getSeatedPlayers() < 2 then
        printToAll('Must have at least two players to fill with guardians.')
        return false
    end

    for _, color in ipairs(possibleColors) do
        local found = false
        for _, seatedColor in ipairs(getSeatedPlayers()) do
            if color == seatedColor then
                found = true
            end
        end

        if not found then
            guardianBag.takeObject({
                position = GuardiansSpots[color].position,
                rotation = GuardiansSpots[color].rotation,
                callback_function = function (obj)
                    obj.setLock(true)
                end
            })
            discoveryBag.takeObject({
                position = GuardiansSpots[color].position+Vector(0,1,0),
                rotation = GuardiansSpots[color].rotation+Vector(0, -45, 180),
            })

            activeGuardianBag.takeObject({
                position = GuardiansSpots[color].position+Vector(0,2,0),
                rotation = GuardiansSpots[color].rotation
            })
            guardianModelBag.takeObject({
                position = GuardiansSpots[color].position+Vector(0,3,0),
                rotation = GuardiansSpots[color].rotation
            })
        end
    end
end

function showNextRoundButton()
    getObjectFromGUID(nextRoundButton_GUID).setInvisibleTo({})
    getObjectFromGUID(nextRoundButton_GUID).interactable = true
end

function tossOuterSectors()
    -- Toss extra sector 3 tiles for setup --
    local s = Sector3Bag.takeObject({rotation = {180,90,0}})
    ExtraS3Bag.putObject(s)
end

function basicSetup2(parameters)
    -- Handle basic player setup

    local PlayerColor = parameters.PlayerColor
    local FactionName = parameters.FactionName

    local Box_GUID = parameters.BoxGuid or factions[FactionName].Box_GUID
    local Box = getObjectFromGUID(Box_GUID)
    assert(Box ~= nil)
    assert(Box.getPosition() ~= nil)
    assert(factions[FactionName].numStartingInfluence ~= nil)

    factions[FactionName].available = false
    
    --     log('Starting basic setup for '..tostring(PlayerColor))
    -- check if the player already selected a faction
    if PlayerRace[PlayerColor] ~= nil then
        print(PlayerRace[PlayerColor], ' already selected. You can only select one faction.')
        return false
    end

    PlayerRace[PlayerColor] = FactionName .. ' '    -- A space so it can be reset in setRace

    local PlayerPosition = Player[PlayerColor].getHandTransform(int).position
    PlayerPosition.y = 0.15

    local SpawnPos=Vector(Box.getPosition()) + Vector(0,5,0)
    local InvPos = -1

    local takeParams = {position = SpawnPos, rotation = vector(0,0,0)}
    if PlayerPosition.z < 0 then
        takeParams.rotation = vector(0,180,0)
        InvPos = 1
    end

    local destination

    -- take fleet and position it
    Object = SeekAndTake('Fleet', Box, takeParams)
    if (Object~=false) then
            destination = PlayerPosition + Vector(-16.5*InvPos, 0, 11*InvPos)
            Object.setPositionSmooth(destination,false, true)
            Object.setColorTint(Color.fromString(PlayerColor))
            Object.setDescription('These are custom fleet units for your race. If you want, you can use these to replace the default ship models.')
    end

    -- take ambassador tiles and position them
    Object = SeekAndTake('Ambassador', Box, takeParams)
    if (Object~=false) then
        destination = PlayerPosition + Vector(19.5*InvPos, 0, 24*InvPos)
        Object.setPositionSmooth(destination,false, true)
    end

    -- take action card and position it
    Object = SeekAndTake('Actions', Box, takeParams)
    if (Object~=false) then
        destination = PlayerPosition + Vector(-16.5*InvPos, 0, 20.6*InvPos)
        Object.setPositionSmooth(destination,false, true)
    end

    -- take player board and position it
    local board = SeekAndTake('Player Board', Box, takeParams)
    if (board~=false) then
        destination = PlayerPosition + Vector(0, -0.14, 19*InvPos)
        board.setPositionSmooth(destination,false, true)

        triggerFunctionIfResting(board,
            function()
                log('Setting up board for ' .. tostring(PlayerColor))
                setupPlayerInfluence(board,
                                     PlayerColor,
                                     factions[FactionName].numStartingInfluence)
                getBoardInitialTechs(board)
            end)
    end

    -- take home world and position it
    local homeworld = SeekAndTake('Homeworld', Box, takeParams)
    if (homeworld~=false) then
        -- destination = PlayerPosition + Vector(-16.5*InvPos, 0, 6*InvPos)
        -- Object.setPositionSmooth(destination,false, true)
        Wait.condition(
            function () placeHomeworld(homeworld, PlayerColor) end,
            function () return (not homeworld.spawning) end
        )

        -- Setup race
        Wait.condition(
            function () raceSetup(homeworld, PlayerColor, board.getName()) end,
            function () return homeworld.resting end
        )
    end

    -- place colony ships
    PlaceColonyShips(Box, takeParams, PlayerPosition)
    return true
end

function PlaceColonyShips(ContainerOrGUID, TakeParams, PlayerPosition)
  -- Search a container for all colony ships and place them in front of the player
  TakeParams.guid = '000000'
  local container
  local guids = {}
  local Object
  local offset
  container = ContainerOrGUID

  for k,v in pairs(container.getObjects()) do
    if string.find(string.lower(v.name or v.nickname), string.lower('Colony Ship')) then
      table.insert(guids, v.guid)
    end
  end

  if #guids == 0 then return false end

  local Inv = -1;
  if PlayerPosition.z < 0 then Inv=1 end
  local StartPosition = PlayerPosition + Vector(-22.4*Inv, 0, 15*Inv)
  if #guids ~= 3 then StartPosition = StartPosition + Vector(1.45*Inv, 0, 0) end
  if #guids > 3 then StartPosition = StartPosition + Vector(0, 0, 1*Inv) end

  for k,id in pairs(guids) do
      TakeParams.guid = guids[id]
      Object = container.takeObject(TakeParams)

      if k>2 and #guids>3 then offset = Vector((k-2)*2.9*Inv, 0, -2*Inv)
      else offset = Vector(k*2.9*Inv, 0, 0) end
      Object.setPositionSmooth(StartPosition + offset, false, true)
    end
end

function loadOngoingGame()
    printToAll('Script is attempting to recover ongoing game state')

    -- Pass state
    for color,guid in pairs(PassCards) do
        local obj = getObjectFromGUID(guid)
        if obj then
            printToAll(color .. " passed: " .. tostring(obj.is_face_down), color)
            passed[color] = obj.is_face_down
        end
    end
    -- After four seconds, start the "All players passed" check
    Wait.time(setPassCheck, 4)

    for color, _ in pairs(PlayerBoardZones) do
        if hasPlayerBoard(color) then
            local board = hasPlayerBoard(color)
            printToAll(color .. " picked " .. board.getName(), color)

            -- Return influence button
            spawnReturnInfluenceButton(board)

            -- PlayerRace
            PlayerRace[color] = board.getName()

            -- PlayerMarkers
            PlayerMarkers[color] = getObjectFromGUID(
                factions[PlayerRace[color]].PassMarker_GUID)

            if not PlayerMarkers[color] then
                log('Player marker for '..color..' not found')
                PlayerMarkers[color] = takePassMarker(color)
            else
                log('Player marker for '..color..' found: '..tostring(PlayerMarkers[color].getName()))
            end
        end
    end
    showNextRoundButton()

end

function isOngoingGame()
    -- Returns true is this is an ongoing game; For instance, if the game was
    -- loaded from a save or rewound in time.
    local round = tonumber(RoundMarker.getDescription())
    if round ~= 0 then return true end
end

function shuffleEverything()
    -- Shuffle all bags and stacks --
    TechBag.shuffle()
    ReputationBag.shuffle()
    DiscoveryBag.shuffle()
    Sector1Bag.shuffle()
    Sector2Bag.shuffle()
    Sector3Bag.shuffle()
    OutpostBag.shuffle()
    AmbassadorBag.shuffle()
end

function setupTiles(players)
    -- Arrange various tiles for first turn setup.
    local trim = Sector3Bag.getQuantity() - outerSectors[players]
    if trim > 0 then
        Wait.time(tossOuterSectors, 0.2, trim)
    end
    local d = DiscoveryBag.takeObject({rotation = {180,-45,0}})
    d.setPositionSmooth(Vector(0, 2, 0), false, false)

    setup_minor_species()
end

function setup_minor_species()
    -- Set up the minor species board
    board = getObjectFromGUID(Minor_Species_Board_GUID)
    for i=1,4 do
        local a = AmbassadorBag.takeObject({rotation = {0,-90,0}})
        pos = board.positionToWorld(
            Minor_Species_Board_positions[i]['position']) + vector(0, 1, 0)
        a.setPositionSmooth(pos, false, false)
    end
end

function setupFirstRound()
    local players = #getSeatedPlayers()
    local round = tonumber(RoundMarker.getDescription()) + 1
    local newTechs = players + 3

    printToAll(string.format("- Setting up for %d players -", players),
    {0.8,0.8,0.8})

    pickRandomNPC()

    if useWarpTiles then fillWithWarp()
    elseif useGuardians then fillWithGuardians() end
    if useHives then addHives() end


    unflipColonyAndSkippers()
    shuffleEverything()
    setupTiles(players)
    techsToDraw = (players * 2) + 8
    startLuaCoroutine(Global, 'drawMultipleTechs')
    setPassCards()
    advanceRoundMarker(round)
    moveAllPassMarkersOffBoard()
    removeUnusedAreas()
    getObjectFromGUID('516e93').destruct() -- Kill the text box above the button
    showNextRoundButton()
end

function addHives()
    hive_sector_2 = getObjectFromGUID(hive_sector_2_GUID)
    hive_sector_3 = getObjectFromGUID(hive_sector_3_GUID)
    Sector3Bag.putObject(hive_sector_3)
    Sector2Bag.putObject(hive_sector_2)
end

function pickRandomNPC()
        -- Pick random NPCs
        local rt = {0.00, 270.00, 0.00}
        x = getObjectFromGUID('b61460').takeObject({rotation= rt, position= AncientSpot})
        x.setLock(true)
        activeAncientsBag = x

        x = getObjectFromGUID('0a5a7a').takeObject({rotation= rt, position= GuardianSpot})
        x.setLock(true)
        activeGuardianBag = x

        -- Pick a GCDS tile and move the GCDS
        getObjectFromGUID('133a3f').takeObject({rotation= rt, position= GCDSSpot})
        Wait.time(function ()
            getObjectFromGUID('4eed67').setPositionSmooth(Vector(0, 2, 0))
        end, 2)

        npcBag = getObjectFromGUID('5bd793')
        for _, npc in pairs(getObjectsWithTag('Random NPC')) do
            npcBag.putObject(npc)
        end
end

function removeUnusedAreas()
    for color, _ in pairs(PlayerBoardZones) do
        if not colorInGame(color) then
            -- log(color .. " is not in game. Removing.")
            for _, obj in pairs(getObjectsWithTag(color)) do
                -- Remove the player's area
                -- log("Destroying "..obj.getName())
                obj.destruct()

                PassCards[color] = nil
                PlayerBoardZones[color] = nil
                PlayerRace[color] = nil
                passRestingPositions[color] = nil
                PlayerMarkers[color] = nil
            end
        end
    end
end
