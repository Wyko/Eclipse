function scoreGame()
    local hex_points = getPointsForControlledHexes()
    local discovery_points = getPointsForDiscoveryTiles()
    local tech_points = scoreTechnology()
    local monolith_points = getPointsForMonoliths()
    local reputation_points = getPointsForReputation()
    local total = {}

    function _score(t)
        if t == nil then return end
        for c, points in pairs(t) do
            if total[c] == nil then total[c] = 0 end
            total[c] = total[c] + points
        end
    end

    _score(hex_points)
    _score(discovery_points)
    _score(tech_points)
    _score(monolith_points)
    -- _score(reputation_points)

    printToAll('Total:\n'..dump(total))
    return total
end

function getInfluenceDiscsOnHexes()
    return getItemsInZone{zone= TableZone, name='Influence Disc'}
end

function getPointsForControlledHexes()
    local table_objects = getInfluenceDiscsOnHexes()

    local player_points = {}

    for _, disc in ipairs(table_objects) do

        -- Get the hex under the influence disc
        local hex = castAndCheckForTag(disc.getPosition(), 'hex')
        if hex ~= nil then

            -- Get the owner of the disc from its color
            local c = disc.getColorTint()
            c = c:toString()
            assert(type(c) == 'string')

            -- Score the hex
            if player_points[c] == nil then player_points[c] = 0 end
            local rep = hex.getVar('reputation')
            assert(rep~=nil, 'Hex ['..hex.getDescription()..'] has no VP data.' )

            -- Add the points to the owner's score
            player_points[c] = player_points[c] + rep
        end
    end

    printToAll("Points from Hexes:")
    printToAll(dump(player_points))
    return player_points
end

function getPointsForDiscoveryTiles()
    local player_points = {}

    -- Search each player's table for discovery tiles and score them
    for c, t in pairs(TableGUIDs) do
        local results = castBoxAndCheck(t, nil, 'Discovery Tile')
        for _, tile in pairs(results) do
            if player_points[c] == nil then player_points[c] = 0 end
            player_points[c] = player_points[c] + scoreDiscoveryTile(tile)
        end
    end

    printToAll("Points from Discoveries:")
    printToAll(dump(player_points))
    return player_points
end

function scoreDiscoveryTile(tile, player)
    -- Error Checking
    assert(tile.hasTag('Discovery Tile'))

    -- Score unused discoveries
    if tile.is_face_down then
        printToAll(tile.getName() .. ' is worth 2 points')
        return 2
    end

    -- Check if the discovery tile has a custom function for points
    if hasFunction(tile, 'score_discovery') then
        return tile.call(score_discovery, player)
    else
        return 0
    end
end

function scoreTechnology()
    local points = {}
    local all_boards = getAllPlayerBoards()
    if all_boards == nil then return {} end

    for c, board in pairs(all_boards) do
        if points[c] == nil then points[c] = 0 end
        for _, t in ipairs({"Red", "Green", "Yellow"}) do
            local space = nextFreeTechSpace(t, board)
            if space == nil then points[c] = points[c] + 5 end
            if space == 8 then points[c] = points[c] + 3 end
            if space == 7 then points[c] = points[c] + 2 end
            if space == 6 then points[c] = points[c] + 1 end
        end
    end

    printToAll("Points from Techs:")
    printToAll(dump(points))
    return points
end

function getPointsForMonoliths()
    local monoliths = getItemsInZone{zone= TableZone, name='Monolith'}
    local points = {}

    for _, m in ipairs(monoliths) do
        -- Get the hex under the monolith
        local hex = castAndCheckForTag(m.getPosition(), 'hex')

        -- Score the monolith based on the owner of the hex
        if hex ~= nil then
            local c = getOwnerOfHex(hex)
            if c ~= nil and points[c] == nil then points[c] = 0 end
            if c ~= nil then points[c] = points[c] + 3 end
        end
    end

    printToAll("Points from Monoliths:")
    printToAll(dump(points))
    return points
end

function getPointsForReputation()

end
