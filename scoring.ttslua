function makeScoreButton()
    local tooltip= "Score the game and print the results to chat. Reputation will only be scored at the end of the game."
    local data = {click_function = "scoreButton", tooltip=tooltip, function_owner = self, label = "Score", position = {3.5, 0.2, 3.6}, scale = {0.5, 0.5, 0.5}, width = 2000, height = 600, font_size = 400}
    local board = getObjectFromGUID('48e151')
    assert(board ~= nil)
    board.createButton(data)
end

function scoreButton(obj, color, alt_click)
    scoreGame(color, true)

    -- Upload the game data
    local eg = isEndGame()
    if setup_options.ranked and (eg or DEBUG) then
        log('Attempting to upload game to the Eclipse Analytics Project',
            'scoreButton')
        if not pcall(uploadGame) then log('Error while uploading game!') end
    else
        log('Not uploading game. Either setup_options.ranked ['..
            tostring(setup_options.ranked) ..'] or isEndGame() ['..
            tostring(eg)..'] is set to "false".')
    end
end


function scoreGame(color, printOut)
    log('Color: ['..tostring(color)..'], printOut: ['..tostring(printOut)..
        ']', 'scoreGame: Passed Arguments')
    printOut = printOut or true
    local fullString = ''
    local total = {}

    function _score(t, source)
        if t == nil or next(t) == nil then return end

        -- local safeSource = string.gsub(source, ' ', '_')
        local printString = source .. ': '
        for c, points in pairs(t) do

            -- Initialize the player's score if needed
            if total[c] == nil then total[c] = {['score'] = 0} end

            -- Log the score, both totally and individually
            total[c][source] = points
            total[c].score = total[c].score + points

            printString = printString .. c..': '..tostring(points)..', '
        end
        if printOut and color then printToColor(printString, color) end
        fullString = fullString .. '\n' .. printString
    end

    -- TODO: Add check to verify that there are no models AND tiles on a hex
    if ownerOfRace('Descendants of Draco') ~= nil and printOut and color then
        printToColor(ojText('Note for Draco: ') ..
        'The scoring script scores ancient ship models AND tiles. In order ' ..
        'to not score double points for Draco, please use only one type of '..
        'object (ship model or tile) on each hex with ancients on it.', color)
    end

    _score(getPointsForControlledHexes(), 'Hexes')
    _score(getPointsForDiscoveryTiles(), 'Discovery Tiles')
    _score(getPointsForTech(), 'Technologies')
    _score(getPointsForMonoliths(), 'Monoliths')
    _score(getPointsForAmbassadors(), 'Ambassadors')
    _score(getPointsForMinorSpecies(), 'Minor Species')
    _score(getPointsForWarpTokens(), 'Warp Tokens')
    _score(getPointsForAncients(), 'Draco Ancients')
    _score(getPointsForExileOrbitals(), 'Exiles Orbitals')
    _score(getPointsForPyxisStarbases(), 'Pyxis Deathmoons')
    _score(losePointsForBeingTraitor(), 'Traitor Tile')

    -- Only score rep at the end of the game
    if isEndGame() then
        _score(getPointsForReputation(), 'Reputation Tiles')
    elseif printOut and color then
        printToColor('Not scoring reputation until the end of round 8.', color)
    end


    -- Generate the final score message to print to the chat
    local totalString = '\nTotal Points:\n'
    for c, t in pairs(total) do
        local name = ''
        if Player[c].seated then name = Player[c].steam_name .. ', ' end
        totalString = totalString .. '   ['..Color[c]:toHex()..']'..c..'[-]'..
            ' ('.. name ..PlayerRace[c]..'): '..tostring(t.score)..'\n'
    end

    -- Print the score to all players if the game is over, otherwise only to
    -- the one player
    if isEndGame() then
        log('Printing score to all players', 'scoreGame')
        Notes.setNotes(totalString .. '\n' .. fullString)
        printToAll(totalString)
    else
        if printOut and color then
            log('Printing score to player ['..tostring(color)..']', 'scoreGame')
            printToColor(totalString, color)
        end
    end

    return total
end

function getPointsForControlledHexes()
    local discs = getInfluenceDiscsOnHexes()

    local points = {}
    local scored_hexes = {}

    for _, disc in ipairs(discs) do

        -- Get the hex under the influence disc
        local hex = castAndCheckForTag(disc.getPosition(), 'hex')
        if hex ~= nil and scored_hexes[hex] == nil then

            -- Stop from duplicating hex scoring
            scored_hexes[hex] = true

            -- Get the owner of the disc from its color
            local c = disc.getColorTint()
            c = c:toString()

            -- Score the hex
            if points[c] == nil then points[c] = 0 end
            local rep = hex.getVar('reputation')
            assert(rep~=nil, 'Hex ['..hex.getDescription()..'] has no VP data.' )

            -- Score Planta
            if PlayerRace[c] == 'Planta' then points[c] = points[c] + 1 end

            -- Add the points to the owner's score
            points[c] = points[c] + rep
        end
    end

    return points
end

function getPointsForDiscoveryTiles()
    local points = {}

    -- Search each player's table for discovery tiles and score them
    for c, t in pairs(TableGUIDs) do
        local results = castBoxAndCheck(t, nil, 'Discovery Tile')
        for _, tile in pairs(results) do
            if points[c] == nil then points[c] = 0 end
            points[c] = points[c] + scoreDiscoveryTile(tile, c)
        end
    end

    return points
end

function scoreDiscoveryTile(tile, color)
    -- Error Checking
    assert(tile.hasTag('Discovery Tile'))

    local score = 0

    -- Score unused discoveries
    if tile.is_face_down then
        return 2

    -- Score Magellan
    elseif PlayerRace[color] ~= nil and
           string.find(PlayerRace[color], 'Magellan') then
        score = score + 1
    end

    -- Check if the discovery tile has a custom function for points
    if hasFunction(tile, 'reputation_func') then
        score = score + tile.call('reputation_func', color)
    end

    return score
end

function getPointsForTech()
    local points = {}
    local all_boards = getAllPlayerBoards()
    if all_boards == nil then return {} end

    for c, board in pairs(all_boards) do
        for _, t in ipairs({"Red", "Green", "Yellow"}) do
            local space = nextFreeTechSpace(t, board)

            -- Initialize the table
            if space == nil or space >= 5 then
                if points[c] == nil then points[c] = 0 end
            end

            if     space == nil then points[c] = points[c] + 5
            elseif space == 7 then points[c] = points[c] + 3
            elseif space == 6 then points[c] = points[c] + 2
            elseif space == 5 then points[c] = points[c] + 1
            end
        end
    end

    return points
end

function getPointsForMonoliths()
    local monoliths = getItemsInZone{zone= TableZone, name='Monolith'}
    local points = {}

    for _, m in ipairs(monoliths) do
        -- Get the hex under the monolith
        local hex = castAndCheckForTag(m.getPosition(), 'hex')

        -- Score the monolith based on the owner of the hex
        if hex ~= nil then
            local c = getOwnerOfHex(hex)
            if c ~= nil and points[c] == nil then points[c] = 0 end
            if c ~= nil then points[c] = points[c] + 3 end
        end
    end

    return points
end

function getPointsForReputation()
    local points = {}

    -- Search each player's table for discovery tiles and score them
    for c, _ in pairs(TableGUIDs) do
        local rep = scoreReputation(c)
        if rep > 0 then points[c] = rep end
    end

    return points
end

function scoreReputation(color)
    local points = 0
    local results = getReputationTiles(color)

    for _, tile in pairs(results) do
        points = points + tile.getVar('reputation')
    end
    return points
end

function getReputationTiles(color)
    local t = TableGUIDs[color]
    return castBoxAndCheck(t, nil, 'Rep Tile')
end

function getPointsForAmbassadors()
    local points = {}
    local all_boards = getAllPlayerBoards()
    if all_boards == nil then return {} end

    for c, board in pairs(all_boards) do
        local results = getObjectsInRepZone{board= board, tag= 'Ambassador'}
        if results ~= nil then
            for _, a in pairs(results) do
                if points[c] == nil then points[c] = 0 end
                points[c] = points[c] + 1
            end
        end
    end

    return points
end

function getPointsForWarpTokens()

    local warps = {
        ['warpDiscovery'] = {['obj'] = getObjectFromGUID('75a159'), ['points'] = 2},
        ['warpTech']      = {['obj'] = getObjectFromGUID('0ed41c'), ['points'] = 1}
    }

    local points = {}

    for _, tile in pairs(warps) do
        if tile.obj ~= nil then
            -- Get the hex under the token
            local hex = castAndCheckForTag(tile.obj.getPosition(), 'hex')

            -- Score the token based on the owner of the hex
            if hex ~= nil then
                local c = getOwnerOfHex(hex)
                if c ~= nil and points[c] == nil then points[c] = 0 end
                if c ~= nil then points[c] = points[c] + tile.points end
            end
        end
    end

    return points
end

function getPointsForAncients()
    -- Only score if Draco is present
    local c = nil
    for color, race in pairs(PlayerRace) do
        if race == 'Descendants of Draco' then
            c = color
            break
        end
    end
    if c == nil then return {} end

    local ancients = getItemsInZone{zone= TableZone, tag='Ancient'}
    local points = {}

    for _, m in ipairs(ancients) do
        -- Get the hex under the ancient
        local hex = castAndCheckForTag(m.getPosition(), 'hex')

        -- Score the ancient
        if hex ~= nil then
            if points[c] == nil then points[c] = 0 end
            -- Score stacks of ancients too
            points[c] = points[c] + numStackedObjects(m)
        end
    end

    return points
end

function getPointsForMinorSpecies()
    local points = {}
    local all_boards = getAllPlayerBoards()
    if all_boards == nil then return {} end

    for c, board in pairs(all_boards) do
        local results = getObjectsInRepZone{board= board, tag= 'Minor Species'}
        if results ~= nil then
            for _, tile in pairs(results) do
                if points[c] == nil then points[c] = 0 end

                -- Get a special function if it has one
                if hasFunction(tile, 'reputation_func') then
                    local _p = tile.call('reputation_func', {color= c, board= board})
                    if _p ~= nil then points[c] = points[c] + _p end
                end

                -- Get any saved reputation
                local rep = tile.getVar('reputation')
                if rep ~= nil then points[c] = points[c] + rep end
            end
        end
    end

    return points
end

function getPointsForExileOrbitals()
    -- Only score if Exiles are present
    local c = ownerOfRace('Exiles')
    if c == nil then return {} end

    local orbitals = getItemsInZone{zone= TableZone, tag='Orbital'}
    local points = {}

    for _, m in ipairs(orbitals) do
        -- Get the hex under the orbital
        local hex = castAndCheckForTag(m.getPosition(), 'hex')


        -- Check if Exiles own the hex
        if hex ~= nil and getOwnerOfHex(hex) == c then

            -- Score the orbital
            if points[c] == nil then points[c] = 0 end
            points[c] = points[c] + 1
        end
    end

    return points
end

function getPointsForPyxisStarbases()
    -- Only score if Pyxis is present
    local c = ownerOfRace('Pyxis Unity')
    if c == nil then return {} end

    local starbases = getItemsInZone{zone= TableZone, tag='Starbase'}
    local points = {}

    for _, m in ipairs(starbases) do

        -- Check if Pyxis owns the ship
        local ownerColor = m.getColorTint():toString()
        if ownerColor == c then
            -- Only score it if it's deployed onto a hex
            local hex = castAndCheckForTag(m.getPosition(), 'hex')
            if hex ~= nil then

                -- Score the starbase
                if points[c] == nil then points[c] = 0 end

                -- Check if the deathmoon is stacked
                points[c] = points[c] + (4 * numStackedObjects(m))
            end
        end
    end

    return points
end

function losePointsForBeingTraitor()
    local points = {}

    -- Search each player's table for the traitor tile and score it
    for c, _ in pairs(TableGUIDs) do
        local t = TableGUIDs[c]
        local results = castBoxAndCheck(t, nil, 'Traitor Tile')
        if tableLen(results) > 0 then
            points[c] = -2
            break
        end
    end

    return points
end
