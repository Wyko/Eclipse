function scoreGame(color, printOut)
    printOut = printOut or true

    local total = {}

    function _score(t, source)
        if t == nil then return end
        local printString = source .. ': '
        for c, points in pairs(t) do
            if total[c] == nil then total[c] = 0 end
            printString = printString .. c..': '..tostring(points)..', '
            total[c] = total[c] + points
        end
        if printOut then printToColor(printString, color) end
    end

    _score(getPointsForControlledHexes(), 'Hexes')
    _score(getPointsForDiscoveryTiles(), 'Discovery Tiles')
    _score(getPointsForTech(), 'Technologies')
    _score(getPointsForMonoliths(), 'Monoliths')
    _score(getPointsForAmbassadors(), 'Ambassadors')

    if getCurrentRound() >= 0 then
        _score(getPointsForReputation(), 'Reputation Tiles')
    else
        printToColor('Not scoring reputation due to hidden info.', color)
    end


    local totalString = '\nTotal\n'
    for c, t in pairs(total) do
        totalString = totalString .. '   '..c..': '..tostring(t)..'\n'
    end
    if printOut then printToColor(totalString, color) end

    return total
end

function getPointsForControlledHexes()
    local discs = getInfluenceDiscsOnHexes()

    local points = {}
    local scored_hexes = {}

    for _, disc in ipairs(discs) do

        -- Get the hex under the influence disc
        local hex = castAndCheckForTag(disc.getPosition(), 'hex')
        if hex ~= nil and scored_hexes[hex] == nil then

            -- Stop from duplicating hex scoring
            scored_hexes[hex] = true

            -- Get the owner of the disc from its color
            local c = disc.getColorTint()
            c = c:toString()

            -- Score the hex
            if points[c] == nil then points[c] = 0 end
            local rep = hex.getVar('reputation')
            assert(rep~=nil, 'Hex ['..hex.getDescription()..'] has no VP data.' )

            -- Score Planta
            if PlayerRace[c] == 'Planta' then points[c] = points[c] + 1 end

            -- Add the points to the owner's score
            points[c] = points[c] + rep
        end
    end

    return points
end

function getPointsForDiscoveryTiles()
    local points = {}

    -- Search each player's table for discovery tiles and score them
    for c, t in pairs(TableGUIDs) do
        local results = castBoxAndCheck(t, nil, 'Discovery Tile')
        for _, tile in pairs(results) do
            if points[c] == nil then points[c] = 0 end
            points[c] = points[c] + scoreDiscoveryTile(tile, c)
        end
    end

    return points
end

function scoreDiscoveryTile(tile, color)
    -- Error Checking
    assert(tile.hasTag('Discovery Tile'))

    local score = 0

    -- Score unused discoveries
    if tile.is_face_down then
        return 2

    -- Score Magellan
    elseif PlayerRace[color] ~= nil and
           string.find(PlayerRace[color], 'Magellan') then
        score = score + 1
    end

    -- Check if the discovery tile has a custom function for points
    if hasFunction(tile, 'reputation_func') then
        score = score + tile.call('reputation_func', color)
    end

    return score
end

function getPointsForTech()
    local points = {}
    local all_boards = getAllPlayerBoards()
    if all_boards == nil then return {} end

    for c, board in pairs(all_boards) do
        if points[c] == nil then points[c] = 0 end
        for _, t in ipairs({"Red", "Green", "Yellow"}) do
            local space = nextFreeTechSpace(t, board)
            if     space == nil then points[c] = points[c] + 5
            elseif space == 7 then points[c] = points[c] + 3
            elseif space == 6 then points[c] = points[c] + 2
            elseif space == 5 then points[c] = points[c] + 1
            end
        end
    end

    return points
end

function getPointsForMonoliths()
    local monoliths = getItemsInZone{zone= TableZone, name='Monolith'}
    local points = {}

    for _, m in ipairs(monoliths) do
        -- Get the hex under the monolith
        local hex = castAndCheckForTag(m.getPosition(), 'hex')

        -- Score the monolith based on the owner of the hex
        if hex ~= nil then
            local c = getOwnerOfHex(hex)
            if c ~= nil and points[c] == nil then points[c] = 0 end
            if c ~= nil then points[c] = points[c] + 3 end
        end
    end

    return points
end

function getPointsForReputation()
    local points = {}

    -- Search each player's table for discovery tiles and score them
    for c, _ in pairs(TableGUIDs) do
        local rep = scoreReputation(c)
        if rep > 0 then points[c] = rep end
    end

    return points
end

function scoreReputation(color)
    local t = TableGUIDs[color]
    local points = 0
    local results = castBoxAndCheck(t, nil, 'Rep Tile')

    for _, tile in pairs(results) do
        points = points + tile.getVar('reputation')
    end
    return points
end

function getPointsForAmbassadors()
    local points = {}
    local all_boards = getAllPlayerBoards()
    if all_boards == nil then return {} end

    for c, board in pairs(all_boards) do
        local results = getObjectsInRepZone(board, nil, 'Ambassador')
        if results ~= nil then
            for _, a in pairs(results) do
                if points[c] == nil then points[c] = 0 end
                points[c] = points[c] + 1
            end
        end
    end

    return points
end
