function nextFreeTechSpace(trackColor, board)
    local InvPos = boardInvertFactor(board)
    InvPos = Vector(InvPos, 1, InvPos)

    -- log(trackColor, 'nextFreeTechSpace')
    -- log(board, 'nextFreeTechSpace')

    for index, pos in ipairs(techTracks[trackColor]) do
        local tmpPos = (Vector(pos) * InvPos) + board.getPosition()
        if not castAndCheckForTag(tmpPos, 'Tech Tile') then
            return index
        end
    end
    return nil
end

function putTechOnTrack(tech, trackColor, board, spot, lock)
    -- Clones a tech in the tech bag and places it at the specified spot number
    -- If no spot is specified, the next available spot is used.
    -- tech can be a techName (to be searched from the bag) or an Object


    spot = spot or nextFreeTechSpace(trackColor, board)
    if not spot then
        broadcastToColor(
            "No free space on your " .. trackColor .. " track.",
            ownerOfBoard(board).color)
        return false
    end

    -- local finalPos = getRelativePosition(board, techTracks[trackColor][spot])

    local InvPos = boardInvertFactor(board)
    InvPos = Vector(InvPos, 1, InvPos)
    local finalPos = (Vector(techTracks[trackColor][spot]) * InvPos) + board.getPosition()

    log(type(tech), 'putTechOnTrack:type(tech)')
    if type(tech) == 'string' then
        log('Preparing clone', 'putTechOnTrack')
        SeekAndClone(tech, TechBag_GUID, finalPos, board.getRotation(), lock)

    elseif tech.tag == "Chip" and tech.getQuantity() > 1 then
        -- If we're supplied an actual object, then just move it
        -- If it's a bag, then you have to use takeObject()

        log('Preparing to takeObject for '..tostring(tech), 'putTechOnTrack')
        tech.takeObject({
            position          = finalPos,
            rotation          = board.getRotation(),
            callback_function = function (tech)
                    assert(tech ~= nil, 'putTechOnTrack3: Tech is nil')
                    triggerFunctionIfResting(
                        tech,
                        function ()
                            assert(tech ~= nil, 'putTechOnTrack1: Tech is nil')
                            tech.setLock(lock)
                        end
                    )
                end
        })
    else
        log(finalPos, 'putTechOnTrack:finalPos')
        tech.setPositionSmooth(finalPos, false, true)
        tech.setRotation(board.getRotation())
        triggerFunctionIfResting(
            tech,
            function ()
                assert(tech ~= nil, 'putTechOnTrack2: Tech is nil')
                tech.setLock(lock)
            end
        )
    end

    return true
end

function addButtonToTechTile(zone, tile)
    -- Adds an invisible "Acquire Tech" button to each tile

    -- Make sure it's a tech tile
    if not tile.hasTag('Tech Tile') or zone.getGUID() ~= TechTileZone_GUID then
      return false
    end

    local techType = string.sub(tile.getDescription(),1,1)
    if techType == 'R' then
        return false
    end

    local data = {
      click_function = "acquireTech",
      function_owner = self,
      label = "Acquire "..tile.getName(),
      position = {0, 0.1, 0},
      scale = {0.5, 0.5, 0.5},
      width = 2000,
      height = 2000,
      font_size = 400,
      color = {0.7573, 0.7573, 0.7573, 0},
      tooltip = "Acquire "..tile.getName(),
    }
    tile.createButton(data)
end

function removeButtonFromTechTile(zone, tile)
    -- Make sure it's a tech tile
    if (not tile.hasTag('Tech Tile') or zone.getGUID() ~= TechTileZone_GUID) then
      return false
    end
    local techType = string.sub(tile.getDescription(),1,1)
    if techType == 'R' then
        return false
    end

    -- if not obj.getButtons() then return false end
    for _, button in pairs(tile.getButtons()) do
        tile.removeButton(button.index)
    end
end

function acquireTech(tile, color)
    -- Takes the given technology tile and moves it to the player board of the
    -- given color

    local board = getBoardBelongingToColor(color)

    if DEBUG then
        assert(board ~= nil, "acquireTech: No board found for player "..tostring(color))
        assert(tile ~= nil, "acquireTech: No tile found for player "..tostring(color))
    end

    if not board then
        broadcastToColor("Cannot acquire tech. You do not have a board.", color)
        return false
    end

    local msg = Player[color].steam_name .. " acquires " .. tile.getName()
    local techType = string.sub(tile.getDescription(),1,1)
    local trackColor = techTypeToTrackColor(techType)

    printToAll(msg, color)
    putTechOnTrack(tile, trackColor, board, _, true)
end

function techTypeToTrackColor(techType)
    if techType == 'R' then
        return 'Rare'
    elseif techType == 'M' then
        return 'Red'
    elseif techType == 'G' then
        return 'Green'
    elseif techType == 'N' then
        return 'Yellow'
    end
end
